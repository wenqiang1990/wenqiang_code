{"name": "test_living_getlist1[1]", "status": "broken", "statusDetails": {"message": "TypeError: request() got an unexpected keyword argument 'encoding'", "trace": "line = 1\n\n    @pytest.mark.parametrize(\"line\", lines)#参数化\n    def test_living_getlist1(line):\n        excel_data = common.request_excel.open_excel(excel_file)\n        excel_data = list(excel_data[\"updateChannel\"][line])  # 依次取出列表中的元组\n        host = str(excel_data[2]) + \":\" + str(excel_data[3])\n        appid = excel_data[4]\n        url = excel_data[5]\n        check=excel_data[10]\n        excel_data[5] = url % (host, appid)\n        #print('check %s' %check)\n>       redata = common.api_request.api_request_excel(excel_data)\n\ntestcase\\test_living_getPushUrls.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\api_request.py:41: in api_request_excel\n    response = requests.request(method,url,headers=headers,data=data,encoding='UTF-8',errors='strict')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmethod = 'POST'\nurl = 'http://192.168.180.39:8088/v1/application/afea8601a3204c4e9106b6c116c74972/livestream/updateChannel'\nkwargs = {'data': b'{\"channelId\": \"cd7f0f10bdad\", \"uid\": \"00000001\", \"name\": \"1\"}', 'encoding': 'UTF-8', 'errors': 'strict', 'headers': {'Content-Type': 'application/json;charset=utf-8'}}\nsession = <requests.sessions.Session object at 0x0000025EF9E39CC0>\n\n    def request(method, url, **kwargs):\n        \"\"\"Constructs and sends a :class:`Request <Request>`.\n    \n        :param method: method for the new :class:`Request` object.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary, list of tuples or bytes to send\n            in the body of the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n        :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n            ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n            or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string\n            defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n            to add for the file.\n        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How many seconds to wait for the server to send data\n            before giving up, as a float, or a :ref:`(connect timeout, read\n            timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n                the server's TLS certificate, or a string, in which case it must be a path\n                to a CA bundle to use. Defaults to ``True``.\n        :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n        :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n        :return: :class:`Response <Response>` object\n        :rtype: requests.Response\n    \n        Usage::\n    \n          >>> import requests\n          >>> req = requests.request('GET', 'https://httpbin.org/get')\n          <Response [200]>\n        \"\"\"\n    \n        # By using the 'with' statement we are sure the session is closed, thus we\n        # avoid leaving sockets open which can trigger a ResourceWarning in some\n        # cases, and look like a memory leak in others.\n        with sessions.Session() as session:\n>           return session.request(method=method, url=url, **kwargs)\nE           TypeError: request() got an unexpected keyword argument 'encoding'\n\nc:\\users\\qiuqiu\\anaconda3\\lib\\site-packages\\requests\\api.py:60: TypeError"}, "attachments": [{"name": "log", "source": "50b6d522-1a88-469a-bdd0-0d77462c1064-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "320353d4-7489-46f6-b82b-f715e804e75e-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "110cf27b-31b5-4d12-aa32-5f39084b2ccf-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "line", "value": "1"}], "start": 1571818534892, "stop": 1571818534914, "uuid": "84c60696-0710-48f1-968d-ff4bb0e0686a", "historyId": "878ae7d5d30c9ec55a62119f6df05c5d", "fullName": "testcase.test_living_getPushUrls#test_living_getlist1[1]", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_living_getPushUrls"}, {"name": "host", "value": "qiuqiu"}, {"name": "thread", "value": "20008-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_living_getPushUrls"}]}