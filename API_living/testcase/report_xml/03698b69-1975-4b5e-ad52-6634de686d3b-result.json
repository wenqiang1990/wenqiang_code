{"name": "test_living_getlist1[0]", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "line = 0\n\n    @pytest.mark.parametrize(\"line\", lines)#参数化\n    def test_living_getlist1(line):\n        excel_data = common.request_excel.open_excel(excel_file)\n        excel_data = list(excel_data[\"startChannel\"][line])  # 依次取出列表中的元组\n        host = str(excel_data[2]) + \":\" + str(excel_data[3])\n        appid = excel_data[4]\n        url = excel_data[5]\n        check=excel_data[10]\n        excel_data[5] = url % (host, appid)\n        #print(excel_data[5])\n>       redata = common.api_request.api_request_excel(excel_data)\n\ntestcase\\test_living_startChannel.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\api_request.py:45: in api_request_excel\n    return response.json()#与schema做格式比较需要转成json格式\nc:\\users\\qiuqiu\\anaconda3\\lib\\site-packages\\requests\\models.py:897: in json\n    return complexjson.loads(self.text, **kwargs)\nc:\\users\\qiuqiu\\anaconda3\\lib\\json\\__init__.py:348: in loads\n    return _default_decoder.decode(s)\nc:\\users\\qiuqiu\\anaconda3\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000216DF675828>\ns = '<!DOCTYPE html PUBLIC\\n\"-//W3C//DTD XHTML 1.0 Transitional//EN\"\\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional...  Powered by <a href=\"http://www.cherrypy.org\">CherryPy unknown</a>\\n      </span>\\n    </div>\\n    </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nc:\\users\\qiuqiu\\anaconda3\\lib\\json\\decoder.py:355: JSONDecodeError"}, "attachments": [{"name": "log", "source": "e49915d6-8554-4a27-80ee-3c7f6ff435d6-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "55724dd5-b03f-444a-997e-8a04ecd972aa-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "accd533b-4de4-4ca1-8b4c-4c1a58cbc857-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "line", "value": "0"}], "start": 1571814719608, "stop": 1571814719644, "uuid": "72570631-4a67-4bb0-be41-e4a47e44ce5e", "historyId": "c2345cdd5957290e4b43eb42d5da297a", "fullName": "testcase.test_living_startChannel#test_living_getlist1[0]", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_living_startChannel"}, {"name": "host", "value": "qiuqiu"}, {"name": "thread", "value": "14468-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_living_startChannel"}]}