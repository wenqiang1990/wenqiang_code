{
  "uid" : "1932af023d953477",
  "name" : "test_living_getlist1[4]",
  "fullName" : "testcase.test_living_updateChannel#test_living_getlist1[4]",
  "historyId" : "716a86bfa31c0c05a30d643ebb026478",
  "time" : {
    "start" : 1561552957204,
    "stop" : 1561552957231,
    "duration" : 27
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'success' == 'parse the request to js...uld be decoded, code=100'\n  - success\n  + parse the request to json failed, req={\"channelId\":, \"uid\": \"00000005\"}, ex=No JSON object could be decoded, code=100",
  "statusTrace" : "line = 4\n\n    @pytest.mark.parametrize(\"line\", lines)#参数化\n    def test_living_getlist1(line):\n        excel_data = common.request_excel.open_excel(excel_file)\n        excel_data = list(excel_data[\"updateChannel\"][line])  # 依次取出列表中的元组\n        host = str(excel_data[2]) + \":\" + str(excel_data[3])\n        appid = excel_data[4]\n        url = excel_data[5]\n        check=excel_data[10]\n        excel_data[5] = url % (host, appid)\n        #print(excel_data[5])\n        redata = common.api_request.api_request_excel(excel_data)\n>       assert redata[\"message\"] == check\nE       assert 'success' == 'parse the request to js...uld be decoded, code=100'\nE         - success\nE         + parse the request to json failed, req={\"channelId\":, \"uid\": \"00000005\"}, ex=No JSON object could be decoded, code=100\n\ntestcase\\test_living_updateChannel.py:23: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 'success' == 'parse the request to js...uld be decoded, code=100'\n  - success\n  + parse the request to json failed, req={\"channelId\":, \"uid\": \"00000005\"}, ex=No JSON object could be decoded, code=100",
    "statusTrace" : "line = 4\n\n    @pytest.mark.parametrize(\"line\", lines)#参数化\n    def test_living_getlist1(line):\n        excel_data = common.request_excel.open_excel(excel_file)\n        excel_data = list(excel_data[\"updateChannel\"][line])  # 依次取出列表中的元组\n        host = str(excel_data[2]) + \":\" + str(excel_data[3])\n        appid = excel_data[4]\n        url = excel_data[5]\n        check=excel_data[10]\n        excel_data[5] = url % (host, appid)\n        #print(excel_data[5])\n        redata = common.api_request.api_request_excel(excel_data)\n>       assert redata[\"message\"] == check\nE       assert 'success' == 'parse the request to js...uld be decoded, code=100'\nE         - success\nE         + parse the request to json failed, req={\"channelId\":, \"uid\": \"00000005\"}, ex=No JSON object could be decoded, code=100\n\ntestcase\\test_living_updateChannel.py:23: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8d10ea11840ab23d",
      "name" : "log",
      "source" : "8d10ea11840ab23d.txt",
      "type" : "text/plain",
      "size" : 0
    }, {
      "uid" : "54ed521983205438",
      "name" : "stdout",
      "source" : "54ed521983205438.txt",
      "type" : "text/plain",
      "size" : 985
    }, {
      "uid" : "2d61aa5f54b338fb",
      "name" : "stderr",
      "source" : "2d61aa5f54b338fb.txt",
      "type" : "text/plain",
      "size" : 0
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_living_updateChannel"
  }, {
    "name" : "host",
    "value" : "qiuqiu"
  }, {
    "name" : "thread",
    "value" : "10944-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_living_updateChannel"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "line",
    "value" : "4"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "7d0ffa7e77cc4cf",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'success' == 'parse the request to js...uld be decoded, code=100'\n  - success\n  + parse the request to json failed, req={\"channelId\":, \"uid\": \"00000005\"}, ex=No JSON object could be decoded, code=100",
      "time" : {
        "start" : 1561551795898,
        "stop" : 1561551795929,
        "duration" : 31
      }
    }, {
      "uid" : "c22db33f075c8599",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'success' == 'parse the request to js...uld be decoded, code=100'\n  - success\n  + parse the request to json failed, req={\"channelId\":, \"uid\": \"00000005\"}, ex=No JSON object could be decoded, code=100",
      "time" : {
        "start" : 1561551131551,
        "stop" : 1561551131586,
        "duration" : 35
      }
    }, {
      "uid" : "cdf47e6e9a5f244b",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'success' == 'parse the request to js...uld be decoded, code=100'\n  - success\n  + parse the request to json failed, req={\"channelId\":, \"uid\": \"00000005\"}, ex=No JSON object could be decoded, code=100",
      "time" : {
        "start" : 1561518309436,
        "stop" : 1561518309610,
        "duration" : 174
      }
    }, {
      "uid" : "f6ac6e462edd4d73",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'not uid fiel... cannot empty' == 'parse the req...ded, code=100'\n  - not uid field or uid cannot empty\n  + parse the request to json failed, req={\"channelId\":, \"uid\": \"00000005\"}, ex=No JSON object could be decoded, code=100",
      "time" : {
        "start" : 1561099783879,
        "stop" : 1561099783932,
        "duration" : 53
      }
    }, {
      "uid" : "a51b4ee588a3a940",
      "status" : "passed",
      "time" : {
        "start" : 1561099592595,
        "stop" : 1561099592635,
        "duration" : 40
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "1932af023d953477.json",
  "parameterValues" : [ "4" ]
}